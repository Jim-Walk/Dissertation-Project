error[E0596]: cannot borrow `self.c` as mutable, as it is behind a `&` reference
  --> src/stream.rs:20:9
   |
18 |     pub fn triad(&self){
   |                  ----- help: consider changing this to be a mutable reference: `&mut self`
19 |         println!("entered triad!");
20 |         self.c[0] = self.a[0] + self.b[0];
   |         ^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable

error: aborting due to previous error


Working on the multiply function, I encounter this error from the compiler, telling me to "mutably borrow" the variable. I am concerned this will not copy the value through to b afterwards.

pub fn mul(&mut self){
    for (b_i, c_i) in self.b.iter_mut().zip(self.c){
        b_i = self.scalar * c_i;
    }
}



error[E0308]: mismatched types
  --> src/stream.rs:36:19
   |
36 |             b_i = self.scalar * c_i;
   |                   ^^^^^^^^^^^^^^^^^
   |                   |
   |                   expected &mut T, found type parameter
   |                   help: consider mutably borrowing here: `&mut (self.scalar * c_i)`
   |
   = note: expected type `&mut T`
              found type `T`


