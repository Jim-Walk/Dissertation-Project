
struct Sheep {naked: bool, name: &'static str} // &'static str means it's a borrowed pointer to a str

// defines a group of methods
trait Animal { 
    // Static method signature; Self refers to the implementor type
    fn new(name: &'static str) -> Self;

    // Instance method signatures; these will return a string
    fn name(&self) -> &'static str;
    fn noise(&self) -> &'static str;

    // Traits can provide default method definitions
    fn talk(&self){
        println!("{} says {}", self.name(), self.noise());
    }
}

// implement the sheep type
impl Sheep {
    fn is_naked(&self) -> bool{
        self.naked
    }

    fn shear(&mut self){
        if self.is_naked(){
            println!("{} is already naked...", self.name());
        } else {
            println!("{} gets a haircut!", self.name());
            self.naked = true;
        }
    }
}

// Implements the animal traits for the sheep type
impl Animal for Sheep {
    // Self is the implementor type: 'Sheep'
    fn new(name: &'static str) -> Sheep{
        Sheep {name: name, naked: false}
    }

    fn name(&self) -> &'static str{
        self.name
    }

    fn noise(&self) -> &'static str{
        if self.is_naked(){
            "i'm terribly sorry"
        } else {
            "baa"
        }
    }

  // default traits can be overriden
    fn talk(&self){
       println!("{} pauses briefly... {}", self.name, self.noise()); 
    }
}

fn destroy_box(c: Box<i32>){
    println!("Destorying a box that contains {}", c);
}
